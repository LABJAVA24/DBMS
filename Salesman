-- Create tables for SALESMAN, CUSTOMER, ORDERS

CREATE TABLE SALESMAN (

    SALESMAN_ID INT PRIMARY KEY,

    NAME VARCHAR(20),

    CITY VARCHAR(20),

    COMMISSION DECIMAL(5, 2) -- Changed from VARCHAR to DECIMAL for numeric values

);



CREATE TABLE CUSTOMER (

    CUSTOMER_ID INT PRIMARY KEY,

    CUST_NAME VARCHAR(20),

    CITY VARCHAR(20),

    GRADE INT,

    SALESMAN_ID INT REFERENCES SALESMAN(SALESMAN_ID) ON DELETE SET NULL

);



CREATE TABLE ORDERS (

    ORD_NO INT PRIMARY KEY,

    PURCHASE_AMT DECIMAL(10, 2),

    ORD_DATE DATE,

    CUSTOMER_ID INT,

    SALESMAN_ID INT,

    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID) ON DELETE CASCADE,

    FOREIGN KEY (SALESMAN_ID) REFERENCES SALESMAN(SALESMAN_ID) ON DELETE CASCADE

);



-- Insert Data

INSERT INTO SALESMAN VALUES (101, 'rabay', 'shiralkoppa', 18.00);

INSERT INTO SALESMAN VALUES (102, 'alex', 'new york', 15.50);

INSERT INTO SALESMAN VALUES (103, 'jane', 'los angeles', 20.00);

INSERT INTO SALESMAN VALUES (104, 'sam', 'bhatkal', 22.50);

INSERT INTO SALESMAN VALUES (105, 'lara', 'mumbai', 19.00);



INSERT INTO CUSTOMER VALUES (501, 'sharbanu', 'los angeles', 10, 103);

INSERT INTO CUSTOMER VALUES (502, 'mike', 'new york', 12, 102);

INSERT INTO CUSTOMER VALUES (503, 'anna', 'bhatkal', 8, 104);

INSERT INTO CUSTOMER VALUES (504, 'david', 'mumbai', 15, 105);

INSERT INTO CUSTOMER VALUES (505, 'sara', 'shiralkoppa', 7, 101);



INSERT INTO ORDERS VALUES (1, 1000.00, TO_DATE('04-FEB-22', 'DD-MON-YY'), 501, 103);

INSERT INTO ORDERS VALUES (2, 1500.00, TO_DATE('01-MAR-22', 'DD-MON-YY'), 502, 102);

INSERT INTO ORDERS VALUES (3, 2000.00, TO_DATE('15-APR-22', 'DD-MON-YY'), 503, 104);

INSERT INTO ORDERS VALUES (4, 2500.00, TO_DATE('20-MAY-22', 'DD-MON-YY'), 504, 105);

INSERT INTO ORDERS VALUES (5, 3000.00, TO_DATE('25-JUN-22', 'DD-MON-YY'), 505, 101);



-- Query 1: Demonstrate how to select customers whose grade is greater than the average grade in 'bhatkal'

SELECT GRADE, COUNT(CUSTOMER_ID)

FROM CUSTOMER

WHERE CITY = 'bhatkal'

GROUP BY GRADE

HAVING GRADE > (SELECT AVG(GRADE) FROM CUSTOMER WHERE CITY = 'bhatkal');



-- Query 2: Show salespeople who have more than one customer

SELECT SALESMAN_ID, NAME

FROM SALESMAN A

WHERE 1 < (SELECT COUNT(*) FROM CUSTOMER WHERE SALESMAN_ID = A.SALESMAN_ID);



-- Query 3: Show salespeople and customers with matching cities, plus "no_match" for salespeople without matches

SELECT S.SALESMAN_ID, S.NAME, C.CUST_NAME, S.COMMISSION

FROM SALESMAN S

JOIN CUSTOMER C ON S.CITY = C.CITY

UNION

SELECT SALESMAN_ID, NAME, 'no_match', COMMISSION

FROM SALESMAN

WHERE CITY = ANY (SELECT CITY FROM CUSTOMER)

ORDER BY 2 DESC;



-- Create a View for Elit Salesman (salespeople with highest purchase amounts)

CREATE VIEW VW_ELITSALESMAN AS

SELECT B.ORD_DATE, A.SALESMAN_ID, A.NAME

FROM SALESMAN A

JOIN ORDERS B ON A.SALESMAN_ID = B.SALESMAN_ID

WHERE B.PURCHASE_AMT = (SELECT MAX(PURCHASE_AMT) FROM ORDERS C WHERE C.ORD_DATE = B.ORD_DATE);



-- PL/SQL block demonstrating delete, insert, and update with row count

DECLARE

   v_rowcount NUMBER; -- Variable to hold the row count



BEGIN

   -- Delete records where commission is less than 18

   DELETE FROM SALESMAN WHERE COMMISSION < 18;

   

   -- Display the number of rows affected using %ROWCOUNT

   v_rowcount := SQL%ROWCOUNT;

   DBMS_OUTPUT.PUT_LINE('Number of rows deleted: ' || v_rowcount);



   -- Insert some sample data

   INSERT INTO SALESMAN (SALESMAN_ID, NAME, CITY, COMMISSION)

   VALUES (106, 'john', 'chicago', 21);

   

   -- Display the number of rows inserted using %ROWCOUNT

   DBMS_OUTPUT.PUT_LINE('Number of rows inserted: ' || SQL%ROWCOUNT);



   -- Update commission for a specific city

   UPDATE SALESMAN

   SET COMMISSION = COMMISSION + 1

   WHERE CITY = 'new york';



   -- Display the number of rows updated using %ROWCOUNT

   DBMS_OUTPUT.PUT_LINE('Number of rows updated: ' || SQL%ROWCOUNT);



END;

/
